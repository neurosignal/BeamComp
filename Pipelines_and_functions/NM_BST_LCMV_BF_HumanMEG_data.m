%% Script generated by Brainstorm (28-Aug-2018)
%% Author: John Mosher (University of Texas) && Amit Jaiswal (MEGIN, Helsinki)
%% For Multimodal data under BeamComp
restoredefaultpath
clc, clear, refresh, close all; tic
if ispc
    homedir = 'C://Users//fijaiami//'; 
    % addpath([homedir 'Documents//GitHub//fieldtrip'])
    % ft_defaults
    addpath(genpath([homedir '//Documents//brainstorm_180828//brainstorm3//']))
    addpath([homedir 'git//ChildBrain//BeamComp//MATLAB'])
    bst_db = [homedir 'Documents//brainstorm_db//'];
elseif isunix
    homedir = '/home/amit/';
    % addpath([homedir 'git/ChildBrain/BeamComp/MATLAB/fieldtrip-18092018/'])
    % ft_defaults
    addpath(genpath('/home/amit/Documents/brainstorm_181215/brainstorm3/'))
    addpath([homedir 'git//ChildBrain//BeamComp//MATLAB'])
    bst_db =  '/home/amit/Documents/BRAINSTORM_DB/';
end

% Start brainstorm without the GUI
if ~brainstorm('status')
    brainstorm nogui
end
%% Define protocal name
ProtocolName = 'multimodal';

par                   = [];
par.inverse_version   = '2018';
par.Baseline          = [-0.2 -0.05];
par.DataWindow        = [0.05 0.2];
par.sampling_rate     = 600.6150; %  data is collected at 600.6150 Hz
par.use_gls           = 'no';
par.meg               = 'yes';
par.site              = 'Biomag';
par.datacat           = 'multimodal';
par.stimchan          = 'STI 014';
par.src_grid          = 'brain_vol_regular';
par.rm_orig_headshape = 'manual';%'using_bst';
par.visual            = '';
par.powspect          = '';
par.browse            = '';
par.more_plots        = 'sel';
par.plot_FFTorPSD     = 'psd';
par.apply_pca         = 'no';
par.mri_seg           = 'no';
par.mri_realign       = 'yes';
par.align_interactive = 'yes';
par.fbin              = 2;
par.gridres           = 5.0; %mm
par.trialwin          = [-0.500 0.500];
par.bpfreq            = [2 90];
par.stop_or_notch     = 'notch';
par.reg               = 1;   %Notice this before running the code <<<<<<<<<<<
par.source_ortho      = 'yes';
par.prep              = {'','_sss','_tsss'};
par.meg               = {'all', 'mag', 'grad'};
par.icaext            = ''; %-bp_2-95_ICAed 
par.reg_compare       = '';
par.resultplotsave    = 'yes';
par.reg_form          = 'SNR^4/500'; 
par.bads              = 'MEG 0442';
% % Find trigger categories && label them 
keyset   = {'VEF-UR', 'VEF-LR', 'AEF-Re', 'VEF-LL',...
            'AEF-Le', 'VEF-UL', 'SEF-Lh', 'SEF-Rh'};
valueset = [1, 2, 3, 4, 5, 8, 16, 32];
evdict=containers.Map(keyset, valueset);
% actual_diploc=load([homedir 'Documents//MATLAB//multimodal_biomag_diploc.mat']); 
actual_diploc=load([homedir 'git//ChildBrain//BeamComp//MATLAB//my_MATLAB//multimodal_biomag_diploc.mat']); 
actual_diploc=actual_diploc.multimodal_biomag_diploc(1:8,2:4);
close all

%% Delete existing protocol >>>>
% % gui_brainstorm('DeleteProtocol', ProtocolName);

%% Create new protocol
if isempty(sprintf('%s%s//anat', bst_db, ProtocolName)) ||...
        ~exist(sprintf('%s%s',bst_db, ProtocolName), 'dir')
    try
        gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);
    catch err
        disp(err)
    end
end
%% Define Subject name && Start a new report
bst_report('Start');

SubjectName = 'JNe';
if ispc
    AnatDir = 'C:\Users\fijaiami\Documents\jukka_nenonen2';
elseif isunix
    AnatDir = '/net/qnap/data/rd/ChildBrain/neurodata/beamformer_data/Beamformer_share/multimodal/sub1/MEG/anatomy';
end

%% ===== ANATOMY =====
% Process: Import anatomy folder
if ~exist(sprintf('%s%s//anat//%s//brainstormsubject.mat', bst_db,  ProtocolName, SubjectName), 'file')
    bst_process('CallProcess', 'process_import_anatomy', [], [], ...
            'subjectname', SubjectName, ...
            'mrifile',     {AnatDir, 'FreeSurfer'}, ...
            'nvertices',   15000, ...    
            'nas',         [123, 218, 104.5], ...
            'lpa',         [44.9, 119, 69.3], ...
            'rpa',         [204.1, 118, 68.4], ...
            'ac',          [123, 135, 112.3], ...
            'pc',          [123, 98, 107.4], ...
            'ih',          [126, 98, 154.3]);
end
%% Run loop for each category
for maxf = {'raw', 'tsss'} % 
    %% Build the path of the files to import
    maxf = char(maxf);
    if ispc
        tutorial_dir = sprintf('C://0DATA//Biomag_multimodal_data');
        switch maxf
            case 'raw'
                RawFile = sprintf('%s//multimodal_raw.fif', tutorial_dir);
            case 'sss'
                RawFile = sprintf('%s//Amp%d_IASoff_%s//Amp%d_IASoff_%s//Amp%d_Dip%d_IASoff_sss.fif', tutorial_dir, amp, maxf, amp, maxf, amp, dipnum);
            case 'tsss'
                RawFile = sprintf('%s//multimodal_raw_tsss.fif', tutorial_dir);
        end
    elseif isunix
         tutorial_dir = sprintf('/net/qnap/data/rd/ChildBrain/neurodata/beamformer_data/Beamformer_share/multimodal/sub1/MEG');
        switch maxf
            case 'raw'
                RawFile = sprintf('%s//multimodal_raw.fif', tutorial_dir);
            case 'sss'
                RawFile = sprintf('%s//Amp%d_IASoff_%s//Amp%d_IASoff_%s//Amp%d_Dip%d_IASoff_sss.fif', tutorial_dir, amp, maxf, amp, maxf, amp, dipnum);
            case 'tsss'
                RawFile = sprintf('%s//multimodal_raw_tsss.fif', tutorial_dir);
        end            
    end
    [~, dfname,~]=fileparts(RawFile);
    % Check if the folder contains the required files
    % if ~file_exist(RawFile)
    %     error(['The folder ' tutorial_dir ' does not contain the folder from the file sample_neuromag.zip.']);
    % end

    % ===== CREATE PROTOCOL =====
    % % % % The protocol name has to be a valid folder name (no spaces, no weird characters...)
    % % % ProtocolName = 'MULTI';
    % % % % Start brainstorm without the GUI
    % % % if ~brainstorm('status')
    % % %     brainstorm nogui
    % % % end
    % % % % Delete existing protocol
    % % % gui_brainstorm('DeleteProtocol', ProtocolName);
    % % % % Create new protocol
    % % % try
    % % %     gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);
    % % % catch err
    % % %     disp(err)
    % % % end
    % % % % Start a new report
    % % % bst_report('Start');
    %% Phantom anatomy
    % % SubjectName = 'sub3';
    % % sFiles =[];
    % % Process: Import MRI file
    % sFiles = bst_process('CallProcess', 'process_import_mri', sFiles, [], ...
    %     'subjectname', SubjectName, ...
    %     'mrifile',     {'C:\0DATA\Biomag_multimodal_data\nenonen_jukka.nii', 'Nifti1'}, ...
    %     'nas',         [123, 218, 104.5], ...
    %     'lpa',         [44.9, 119, 69.3], ...
    %     'rpa',         [204.1, 118, 68.4], ...
    %     'ac',          [123, 135, 112.3], ...
    %     'pc',          [123, 98, 107.4], ...
    %     'ih',          [126, 98, 154.3]);
    %%
    % DipoleFile = generate_phantom_elekta(SubjectName);

    % Act_locc=load(file_fullpath(DipoleFile));
    % for ii=1:32
    %     act_diploc(ii,:)=Act_locc.Dipole(1,ii).Loc';
    % end

    %% Process: Create link to raw file
    clear sFiles sFilesEpochs sFilesAvg sAvgLCMV
    
    sFiles = bst_process('CallProcess', 'process_import_data_raw', [], [], ... %sAnat
            'subjectname',    SubjectName, ...
            'datafile',       {RawFile, 'FIF'}, ...
            'channelreplace', 1, ...
            'channelalign',   1, ...
            'evtmode',        'value');

    %% Get subject definition && Get MRI file and surface files
    sSubject = bst_get('Subject', SubjectName);
    MriFile    = sSubject.Anatomy(sSubject.iAnatomy).FileName;
    CortexFile = sSubject.Surface(sSubject.iCortex).FileName;
    HeadFile   = sSubject.Surface(sSubject.iScalp).FileName;
    try
        fig1 = view_headpoints(sFiles.ChannelFile, HeadFile); view([90,0])% check the MEG/MRI alignment        
    catch err
    end
    %% Remove original headshape points
    switch par.rm_orig_headshape
        case 'manual' %% Remove headshape points manually 
            load(file_fullpath(sFiles.ChannelFile));
            HeadPoints.Label = [];
            HeadPoints.Loc   = [];
            HeadPoints.Type  = [];
            save(file_fullpath(sFiles.ChannelFile), 'Comment','MegRefCoef','Projector','TransfMeg',...
                'TransfMegLabels','TransfEeg','TransfEegLabels','HeadPoints',...
                'Channel','IntraElectrodes','History','SCS')
            clear('Comment','MegRefCoef','Projector','TransfMeg','TransfMegLabels','TransfEeg',...
                'TransfEegLabels','HeadPoints','Channel','IntraElectrodes','History','SCS')
            % fig0 = view_headpoints(sFiles.ChannelFile, HeadFile); view([90,0])% check the MEG/MRI alignment        
        case 'using_bst'%% Process: Remove head points below zlimit 5000mm (all points)
            sFiles = bst_process('CallProcess', 'process_headpoints_remove', sFiles, [], ...
                'zlimit', 5000);
            view_headpoints(sFiles.ChannelFile, HeadFile); view([90,0])% check the MEG/MRI alignment 
    end
    %% Process: Add head points from another file dense_dig_file
    % dense_dig_file = '\\172.16.50.206\data\rd\ChildBrain\neurodata\demo\example_case\180820\jn_sef_right_raw_sss.fif'; % from neo
    if ispc
        dense_dig_file = 'C:\0DATA\Biomag_multimodal_data\jn_sef_right_raw_sss.fif'; % from Biomag
    elseif isunix
        dense_dig_file = '/net/qnap/data/rd/ChildBrain/neurodata/demo/example_case/181001/jn_sef_01_raw.fif'; % from Biomag (Recorded in October 2018)
    end
    sFiles = bst_process('CallProcess', 'process_headpoints_add', sFiles, [], ...
        'channelfile', {dense_dig_file, 'FIF'}, ...
        'fixunits',    1, ...
        'vox2ras',     1);
    fig3 = view_headpoints(sFiles.ChannelFile, HeadFile); view([90,0])% check the MEG/MRI alignment 

    %% Process: Warp default anatomy
%         sFiles = bst_process('CallProcess', 'process_warp', sFiles, [], ...
%             'usedefault', 2, ...  % Warp
%             'tolerance',  2);

    %% Process: Refine registration
    sFiles = bst_process('CallProcess', 'process_headpoints_refine', sFiles, []);
    fig4 = view_headpoints(sFiles.ChannelFile, HeadFile); view([90,0])% check the MEG/MRI alignment 
    pause(1)
    close([fig1, fig3, fig4])

    %% Mark bad channels
    if isequal(maxf, 'raw')
        sFiles = bst_process('CallProcess', 'process_channel_setbad', sFiles, [], ...
            'sensortypes', par.bads);
    end
        
    %% Process: DC offset correction: [All file]
    sFiles = bst_process('CallProcess', 'process_baseline', sFiles, [], ...
        'baseline',    [], ...
        'sensortypes', 'MEG', ...
        'method',      'bl', ...  % DC offset correction:    x_std = x - &mu;
        'read_all',    0);

    %% Process: Remove linear trend: All file
    sFiles = bst_process('CallProcess', 'process_detrend', sFiles, [], ...
        'timewindow',  [], ...
        'sensortypes', 'MEG', ...
        'read_all',    0);

    %% Process: Band-pass:2Hz-95Hz
    sFiles = bst_process('CallProcess', 'process_bandpass', sFiles, [], ...
        'sensortypes', 'MEG', ...
        'highpass',    par.bpfreq(1), ...
        'lowpass',     par.bpfreq(2), ...
        'attenuation', 'strict', ...  % 60dB
        'mirror',      0, ...
        'useold',      0, ...
        'read_all',    0);

    %% Band-stop || Notch filter
    switch par.stop_or_notch
        case 'stop' %% Process: Butterworth band-stop: 49Hz 51Hz (+/-0.75Hz)
            sFiles = bst_process('CallProcess', 'process_bandstop', sFiles, [], ...
                    'freqlist',    [48, 52], ...
                    'freqwidth',   1.5, ...
                    'sensortypes', 'MEG', ...
                    'read_all',    0);
        case 'notch'        %% Process: Notch filter: 50Hz
            sFiles = bst_process('CallProcess', 'process_notch', sFiles, [], ...
                'freqlist',    50, ...
                'sensortypes', 'MEG', ...
                'read_all',    0);
    end

    %% Process: Run Matlab command
%         sFiles = bst_process('CallProcess', 'process_matlab_eval', sFiles, [], ...
%             'matlab',      ['% Available variables: Data, TimeVector' 10 '' 10 'Data = Data.amit;' 10 'Data=x+y^23+SNR' 10 ''], ...
%             'sensortypes', 'MEG');

    %% Plot FFT or PSD
    switch par.plot_FFTorPSD
        case 'fft'
            %%Process: Fourier transform (FFT)
            FFT = bst_process('CallProcess', 'process_fft', sFiles, [], ...
                'timewindow',  [], ...
                'sensortypes', 'MEG', ...
                'avgoutput',   0);
            fig_fft = view_spectrum(FFT.FileName, 'Spectrum'); 
        case 'psd'
            %%Process: Power spectrum density (Welch)
            PSD = bst_process('CallProcess', 'process_psd', sFiles, [], ...
                'timewindow',  [], ...
                'win_length',  1, ...
                'win_overlap', 50, ...
                'sensortypes', 'MEG', ...
                'win_std',     0, ...
                'edit',        struct(...
                     'Comment',         'Power', ...
                     'TimeBands',       [], ...
                     'Freqs',           [], ...
                     'ClusterFuncTime', 'none', ...
                     'Measure',         'power', ...
                     'Output',          'all', ...
                     'SaveKernel',      0));
            fig_psd= view_spectrum(PSD.FileName, 'Spectrum');
    end
    %% View MRI and surface && View coregistration
    if isequal(par.more_plots, 'yes')
        % Display MRI
        hFigMri1 = view_mri(MriFile);
        hFigMri3 = view_mri_3d(MriFile, [], [], 'NewFigure');
        hFigMri2 = view_mri_slices(MriFile, 'x', 20); 
        pause(0.5);
        % Close figures
        close([hFigMri1 hFigMri2 hFigMri3]);
        % Display scalp and cortex
        hFigSurf = view_surface(HeadFile);
        hFigSurf = view_surface(CortexFile, [], [], hFigSurf);
        hFigMriSurf = view_mri(MriFile, CortexFile);

        % Figure configuration
        iTess = 2;
        panel_surface('SetShowSulci',     hFigSurf, iTess, 1);
        panel_surface('SetSurfaceColor',  hFigSurf, iTess, [1 0 0]);
        panel_surface('SetSurfaceSmooth', hFigSurf, iTess, 0.5, 0);
        panel_surface('SetSurfaceTransparency', hFigSurf, iTess, 0.8);
        figure_3d('SetStandardView', hFigSurf, 'left');
        pause(0.5);
        % Close figures
        close([hFigSurf hFigMriSurf]);

        fig1 = view_headpoints(sFiles.ChannelFile, HeadFile); view([90,0])% check the MEG/MRI alignment
        % Process: Refine registration
        % sFiles = bst_process('CallProcess', 'process_headpoints_refine', sFiles, []);
        % fig2 = view_headpoints(sFiles.ChannelFile, HeadFile); % check the MEG/MRI alignment
        pause(2.0)
        close(fig1)% fig2])
    end
    
    clear '*fig*' '*Fig*' PSD FFT; close all
    
%% Run for each stimulus category    
    for stimcat = keyset        
        stimcat = char(stimcat);
        stimval = evdict(stimcat);
        dipnum = find(valueset==evdict(stimcat));

        if strfind(stimcat, 'VEF')
            par.ctrlwin=[-0.200, -0.050];
            par.actiwin=[0.050, 0.200];
        elseif strfind(stimcat, 'AEF')
            par.ctrlwin=[-0.150, -0.020];
            par.actiwin=[0.020, 0.150];
        elseif strfind(stimcat, 'SEF')
            par.ctrlwin=[-0.100, -0.010];
            par.actiwin=[0.010, 0.100];
        end
        fprintf('\nmaxf\t = %s\nstimcat\t = %s\nstimval\t = %d\nBaseline = [%.3f %.3f]\nData\t = [%.3f %.3f]\n',...
                maxf, stimcat, stimval, par.ctrlwin, par.actiwin)
        %% ===== READ EVENTS =====
        % Process: Read from channel
        sFiles = bst_process('CallProcess', 'process_evt_read', sFiles, [], ...
            'stimchan',  par.stimchan, ...
            'trackmode', 1, ...  % Value: detect the changes of channel value
            'zero',      0);
        % Process: Delete spurious other events unrelated to dipoles
        sFiles = bst_process('CallProcess', 'process_evt_delete', sFiles, [], ...
            'eventname', '256, 768, 1792, 3072, 3840, 3584, 4096, 6144, 7168, 7680, 7936, transient');
        % Process: Rename events to have a leading zero, for proper sorting
        sFiles = bst_process('CallProcess', 'process_evt_rename', sFiles, [], ...
            'src',  num2str(evdict(stimcat)), ...
            'dest', sprintf('%02d ',evdict(stimcat)));
        % Delete the first event of the first category (there is always an artifact)
        LinkFile = file_fullpath(sFiles.FileName);
        LinkMat = load(LinkFile, 'F');
        if ~isempty(LinkMat.F.events) && ~isempty(LinkMat.F.events(1).times)
            LinkMat.F.events(1).times(1)   = [];
            LinkMat.F.events(1).samples(1) = [];
            LinkMat.F.events(1).epochs(1)  = [];
        end
        bst_save(LinkFile, LinkMat, 'v6', 1);

        % eventlabel=LinkMat.F.events(1).label; % FIX it

        eventlabel = sprintf('%02d',evdict(stimcat));
        disp(eventlabel)
        % if isequal(maxf, 'tSSS_mc')
        %     eventlabel = sprintf('%02d ',dipnum+3840);
        % end

        %% Change channels Flag to discard non(MEG) and bad channels
%         ChannelFile_path = file_fullpath(sFiles.ChannelFile);
%         if ~exist([ChannelFile_path(1:end-4) '_backup.mat'], 'file')
%             copyfile(ChannelFile_path, [ChannelFile_path(1:end-4) '_backup.mat'])
%         end
%         copyfile([ChannelFile_path(1:end-4) '_backup.mat'], ChannelFile_path)   
%         
%         % Load channel file > prepare a new channel flag
%         Channel_File = load(file_fullpath(sFiles.ChannelFile));
%         idxmeg = double(~cellfun(@isempty, strfind({Channel_File.Channel.Name}', 'MEG')));
%         if isequal(maxf, 'raw'), badch = par.bads; else badch={}; end
%         
%         idxbadch = -double(ismember({Channel_File.Channel.Name}', badch));
%         idxchflag   = idxbadch + idxmeg;
%         idxchflag(idxchflag==0)=-1; 
%         clear Channel_File
%         
%         % Load file > change ChannelFlag > save file
%         load(file_fullpath(sFiles.FileName))
%         ChannelFlag = idxchflag;
%         save(file_fullpath(sFiles.FileName), 'ColormapType','Comment','DataType','Device',...
%                 'DisplayUnits','Events','History','Std','Time','nAvg','ChannelFlag','F')
%         clear('ColormapType','Comment','DataType','Device','DisplayUnits',...
%               'Events','History','Std','Time','nAvg','ChannelFlag','F')
          
        %%
%         tree_set_channelflag(sFiles.FileName, 'AddBad', 'MEG 0442'); % 'MRT51, MLO52, MLO42, MLO43'
% 
% 
%         % Process: Set bad channels
%         bst_process('CallProcess', 'process_channel_setbad', sFiles, [], ...
%         'sensortypes', 'MEG 0442');

        %% Epoch data                
        sFilesEpochs = bst_process('CallProcess', 'process_import_data_event', sFiles, [], ...
                    'subjectname', SubjectName, ...
                    'condition',   stimcat, ...
                    'eventname',   eventlabel, ...
                    'timewindow',  [], ...
                    'epochtime',   [par.ctrlwin(1), par.actiwin(2)], ...
                    'createcond',  1, ...
                    'ignoreshort', 1, ...
                    'usectfcomp',  0, ...
                    'usessp',      0, ...
                    'freq',        par.sampling_rate, ...
                    'baseline',    [par.ctrlwin(1), par.ctrlwin(1)*0.1]);
                
        % Plot a trial
        % onetrial=load(file_fullpath(sFilesEpochs(1).FileName));
        % figure(), plot(onetrial.F(1:306,:)')       
        %% Process: Set channels type
%         sFilesEpochs = bst_process('CallProcess', 'process_channel_settype', sFilesEpochs, [], ...
%             'sensortypes', 'MEG', ...
%             'newtype',     '''MEG ALL''');
         
        %%  Process: Average: By trial group (folder average)
        sFilesAvg = bst_process('CallProcess', 'process_average', sFilesEpochs, [], ...
            'avgtype',    5, ...  % By trial group (folder average)
            'avg_func',   1, ...  % Arithmetic average:  mean(x)
            'weighted',   0, ...
            'keepevents', 1);
        % Plot a trial
        % avgdat=load(file_fullpath(sFilesAvg.FileName));
        % figure(), plot(avgdat.F(1:306,:)')  
        %% view averaged data (Signal && topoplot)
        if isequal(par.more_plots, 'yes')
            % View recordings
            hFigMeg = view_timeseries(sFilesAvg.FileName, 'MEG');
            hFigMegGrad = view_timeseries(sFilesAvg.FileName, 'MEG GRAD');
            hFigMegMag = view_timeseries(sFilesAvg.FileName, 'MEG MAG');
            % hFigEeg = view_timeseries(sFilesRaw.FileName, 'Misc');
            hFigStim = view_timeseries(sFilesAvg.FileName, 'Stim', {par.stimchan});
            % hFigSel = view_timeseries(sFilesRaw.FileName, 'Stim', {'MLT11','MLT12','MLT13'});
            % Figure configuration
            pause(0.5);
            %panel_record('SetTimeLength', 2);
            %panel_record('SetStartTime', 100);
            panel_record('SetDisplayMode', hFigMeg, 'column');
            panel_montage('SetCurrentMontage', hFigMeg, 'MEG');
            % Set filters: panel_filter('SetFilters', LowPassEnabled, LowPassValue, HighPassEnabled, HighPassValue, SinRemovalEnabled, SinRemovalValue, MirrorEnabled, FullSourcesEnabled)
            % panel_filter('SetFilters', 1, 45, 1, 1, 0, [], 0, 0);
            pause(0.5);
            panel_record('SetDisplayMode', hFigMeg, 'butterfly');
            panel_montage('SetCurrentMontage', hFigMeg, '');

            panel_record('SetDisplayMode', hFigMegGrad, 'butterfly');
            panel_record('SetDisplayMode', hFigMegMag, 'butterfly');

            % Close figures
            close([hFigMeg hFigMegGrad hFigMegMag hFigStim]);
            
            fig1 = view_topography(sFilesAvg.FileName, 'MEG', '2DDisc');
            fig2 = view_topography(sFilesAvg.FileName, 'MEG', '2DSensorCap');%
            fig3 = view_topography(sFilesAvg.FileName, 'MEG', '3DSensorCap');
            fig4 = view_topography(sFilesAvg.FileName, 'MEG', '2DLayout'); % topoplot  
        end
        %% Process: Compute Head Model
%         bst_process('CallProcess', 'process_headmodel', sFilesAvg, [], ...
%             'Comment',     'headmodel', ...
%             'sourcespace', 2, ...  % MRI volume
%             'meg',         2, ...  % single sphere
%             'volumegrid',  struct(...
%             'Method',        'isotropic', ...
%             'nLayers',       17, ...
%             'Reduction',     3, ...
%             'nVerticesInit', 4000, ...
%             'Resolution',    0.005, ...
%             'FileName',      []));
            fprintf('\nDefining %s > > > > > >\n', par.src_grid)
            switch par.src_grid
                case 'brain_vol_regular'
                    sFilesAvg = bst_process('CallProcess', 'process_headmodel', sFilesAvg, [], ...
                        'Comment',     'MRI_volume_brain_5mm', ...
                        'sourcespace', 2, ...  % MRI volume
                        'volumegrid',  struct(...
                             'Method',        'isotropic', ...
                             'nLayers',       17, ...
                             'Reduction',     3, ...
                             'nVerticesInit', 4000, ...
                             'Resolution',    0.005, ...
                             'FileName',      []), ...
                        'meg',         3, ...  % Overlapping spheres
                        'eeg',         1, ...  % 
                        'ecog',        1, ...  % 
                        'seeg',        1, ...  % 
                        'openmeeg',    struct(...
                             'BemFiles',     {{}}, ...
                             'BemNames',     {{'Scalp', 'Skull', 'Brain'}}, ...
                             'BemCond',      [1, 0.0125, 1], ...
                             'BemSelect',    [1, 1, 1], ...
                             'isAdjoint',    0, ...
                             'isAdaptative', 1, ...
                             'isSplit',      0, ...
                             'SplitLength',  4000));
                case 'brain_vol_concentric'
                    sFilesAvg = bst_process('CallProcess', 'process_headmodel', sFilesAvg, [], ...
                        'Comment',     'MRI_cortical_17_3_4000', ...
                        'sourcespace', 2, ...  % MRI volume
                        'volumegrid',  struct(...
                             'Method',        'adaptive', ...
                             'nLayers',       17, ...
                             'Reduction',     3, ...
                             'nVerticesInit', 4000, ...
                             'Resolution',    0.005, ...
                             'FileName',      []), ...
                        'meg',         3, ...  % Overlapping spheres
                        'eeg',         1, ...  % 
                        'ecog',        1, ...  % 
                        'seeg',        1, ...  % 
                        'openmeeg',    struct(...
                             'BemFiles',     {{}}, ...
                             'BemNames',     {{'Scalp', 'Skull', 'Brain'}}, ...
                             'BemCond',      [1, 0.0125, 1], ...
                             'BemSelect',    [1, 1, 1], ...
                             'isAdjoint',    0, ...
                             'isAdaptative', 1, ...
                             'isSplit',      0, ...
                             'SplitLength',  4000));
            end
            fprintf('\nDefined headmodel & source space "%s" > > > > > >\n', par.src_grid)
            % Plot headmodel and grid locations
            [subj_datadir, ~,~ ] = fileparts(file_fullpath(sFilesAvg.FileName));
            HeadModelFile = [subj_datadir '//headmodel_vol_os_meg.mat'];
            view_spheres(HeadModelFile, sFilesAvg.ChannelFile, sSubject)
            view_gridloc(HeadModelFile, 'V'); view(172,6), hold on
%             headmodel_src = load(HeadModelFile); surf = load(file_fullpath(headmodel_src.SurfaceFile));
%             hh = trimesh(surf.Faces, surf.Vertices(:,1),surf.Vertices(:,2),surf.Vertices(:,3));
%             set(hh,'FaceColor','none'); clear headmodel_src surf hh
        %% Process: Compute covariance (noise or data)
        bst_process('CallProcess', 'process_noisecov', sFilesEpochs, [], ...
            'baseline',       par.Baseline, ...
            'datatimewindow', par.DataWindow, ... 
            'sensortypes',    'MEG', ...
            'target',         1, ...  % Noise covariance     (covariance over baseline time window)
            'dcoffset',       1, ...  % Block by block, to avoid effects of slow shifts in data
            'identity',       0, ...
            'copycond',       0, ...
            'copysubj',       0, ...
            'replacefile',    1);  % Replace

        bst_process('CallProcess', 'process_noisecov', sFilesEpochs, [], ...
            'baseline',       par.Baseline, ...
            'datatimewindow', par.DataWindow, ... 
            'sensortypes',    'MEG', ...
            'target',         2, ...  % Data covariance      (covariance over data time window)
            'dcoffset',       1, ...  % Block by block, to avoid effects of slow shifts in data
            'identity',       0, ...
            'copycond',       0, ...
            'copysubj',       0, ...
            'replacefile',    1);  % Replace
        
         % view_noisecov('/home/amit/Documents/BRAINSTORM_DB/multimodal/data/JNe/32/ndatacov_full.mat');
         % % view_helmet(sFiles.ChannelFile)

        %% 
        Channels =load(file_fullpath(sFilesAvg.ChannelFile), 'Channel');
        Chanlabel = {Channels.Channel.Name};
        avgtime  = load(file_fullpath(sFilesAvg.FileName), 'Time');
        avgtime  = avgtime.Time; avgtime2 = avgtime(avgtime>par.actiwin(1));
        % myindices = ~cellfun(@isempty,regexp(Chanlabel,'$MEG'))
        % Channel_File = load(file_fullpath(sFilesAvg.ChannelFile));
        idxmeg = double(~cellfun(@isempty, strfind({Channels.Channel.Name}', 'MEG')));
        if isequal(maxf, 'raw'), badch = par.bads; else badch={}; end
        idxbadch  = -double(ismember({Channels.Channel.Name}', badch));
        megchindx = idxbadch + idxmeg;
        %%megchindx = 1:306;%%find(strfind(Chanlabel, 'MEG'));
        avgdata = load(file_fullpath(sFilesAvg.FileName), 'F');
        avgdata_ = avgdata.F(logical(megchindx),:);
        avgdata = avgdata.F(logical(megchindx),avgtime>par.actiwin(1));
        if isequal(par.more_plots, 'sel')
            figure, ax1=subplot(2,3,1); ax2=subplot(2,3,2); ax3=subplot(2,3,3);
                    ax4=subplot(2,3,4); ax5=subplot(2,3,5); ax6=subplot(2,3,6); fs = 12;
            plot(ax1, avgtime, avgdata_), title(ax1, [dfname '_' stimcat '- Avg.data (sensor)'], 'FontSize', fs, 'Interpreter', 'none'), 
            xlim(ax1,[avgtime(1), avgtime(end)])
        end
        
        %% GLS ******************
        % See in the phantom script
        %% LCMV
        fprintf('\n LCMV METHOD Calculating full noise prestim from all %.0f epochs.\n\n',length(sFilesEpochs))

        sAvgLCMV = bst_process('CallProcess', ['process_inverse_' par.inverse_version], sFilesAvg, [], ...
            'output',  1, ...  % Kernel only: shared
            'inverse', struct(...
            'Comment', '', ...
            'InverseMethod', 'lcmv', ...
            'InverseMeasure', 'nai', ...
            'SourceOrient', {{'free'}}, ...
            'Loose', 0.2, ...
            'UseDepth', 0, ...
            'WeightExp', 0.5, ...
            'WeightLimit', 10, ...
            'NoiseMethod', 'reg', ...%'median'
            'NoiseReg', 0.05, ... %0.1
            'SnrMethod', 'rms', ...
            'SnrRms', 0, ...
            'SnrFixed', 3, ...
            'ComputeKernel', 1, ...
            'DataTypes', {{'MEG'}}));
        %% Convert 3D moment in power and find peak 
        result_lcmv=load(file_fullpath(sAvgLCMV.FileName));
        filt = result_lcmv.ImagingKernel;
        stc_xyz = filt*avgdata;
        stc_xyz = stc_xyz.^2;
        cnt=0; clear stc
        for ii=1:3:length(stc_xyz)
            cnt=cnt+1;
            stc(cnt,:)=stc_xyz(ii,:) + stc_xyz(ii+1,:) + stc_xyz(ii+2,:);
            disp([ii, cnt])
        end
        
        [val, ind] = max(stc(:)); % Taking close to MNE (finding the max on stc series)
        [row_ind, col_ind] = ind2sub(size(stc),ind);
        Est_loc_lcmv = result_lcmv.GridLoc(row_ind, :)*1000;
        % Note: Neuromag_location = [-(CTF_loc_y), (CTF_loc_x), (CTF_loc_z)] *****************
        Est_loc_lcmv_neuromag = [-Est_loc_lcmv(2),Est_loc_lcmv(1),Est_loc_lcmv(3)]; 
        Est_val_lcmv = val;
        stimcat_act_loc_ctf = [actual_diploc(dipnum,2),-actual_diploc(dipnum,1), actual_diploc(dipnum,3)];
        difff_lcmv = sqrt(sum((stimcat_act_loc_ctf-Est_loc_lcmv).^2));
        disp([Est_loc_lcmv_neuromag, Est_val_lcmv, difff_lcmv])
        
        grand_pow = sum(stc,2); %% similar to FieldTrip || SPM12 (finding the max of the summed series)
        [valx, indx] = sort(abs(grand_pow),'descend');
        n_hind = indx(1:50);
        
        n_act_grid = length(grand_pow(grand_pow > max(grand_pow(:))*0.50));
        PSVol = n_act_grid*(par.gridres^3);
        
        % pow_ = sum(stc, 2);
        % [val_, ind_] = max(grand_pow);
        Est_loc_lcmv_ = result_lcmv.GridLoc(indx(1), :)*1000;
        % Note: Neuromag_location = [-(CTF_loc_y), (CTF_loc_x), (CTF_loc_z)] *****************
        Est_loc_lcmv_neuromag_ = [-Est_loc_lcmv_(2),Est_loc_lcmv_(1),Est_loc_lcmv_(3)]; 
        Est_val_lcmv_ = valx(1);
        % figure, plot(valx)
        difff_lcmv_ = sqrt(sum((stimcat_act_loc_ctf-Est_loc_lcmv_).^2));
        disp([Est_loc_lcmv_neuromag_, Est_val_lcmv_, difff_lcmv_])

        disp([difff_lcmv, difff_lcmv_])
        
        %% Using equation, P(r)=trace([W(r)*C(x)*transpose(W(r))]) ****** [FIX IT]
        dat_cov_  = load([fileparts(file_fullpath(sAvgLCMV.FileName)) '/ndatacov_full.mat']);
        dat_cov   = dat_cov_.NoiseCov(find(megchindx),find(megchindx));
        nois_cov_ = load([fileparts(file_fullpath(sAvgLCMV.FileName)) '/noisecov_full.mat']);
        nois_cov  = nois_cov_.NoiseCov(find(megchindx),find(megchindx));
        cnt=0;
        for pnt = 1:3:size(filt,1)
            cnt=cnt+1
            src_pow(cnt,1:3) = [trace(filt(pnt,:) * dat_cov * ctranspose(filt(pnt,:)))/trace(filt(pnt,:) * nois_cov * ctranspose(filt(pnt,:))),...
                               trace(filt(pnt+1,:) * dat_cov * ctranspose(filt(pnt+1,:)))/trace(filt(pnt,:) * nois_cov * ctranspose(filt(pnt,:))),...
                               trace(filt(pnt+2,:) * dat_cov * ctranspose(filt(pnt+2,:)))/trace(filt(pnt,:) * nois_cov * ctranspose(filt(pnt,:)))];
        end
        [maxval, maxidx] = max(sum(src_pow,2));
        estlocc=result_lcmv.GridLoc(maxidx,:)*1000;
        % % 
        %% Plotting 
        if isequal(par.more_plots, 'sel')
            ymin = min(min(min(stc)), min(min(stc_xyz))); ymax = max(max(max(stc)), max(max(stc_xyz)));
            plot(ax2, avgtime2, stc_xyz(1:3:size(stc_xyz,1),:)'), title(ax2,'STC_X', 'FontSize', fs),  
            xlim(ax2,[avgtime2(1), avgtime2(end)]), ylim(ax2,[ymin, ymax]), pause(1)
            plot(ax3, avgtime2, stc_xyz(2:3:size(stc_xyz,1),:)'), title(ax3,'STC_Y', 'FontSize', fs),  
            xlim(ax3,[avgtime2(1), avgtime2(end)]), ylim(ax3,[ymin, ymax]), pause(1)
            plot(ax4, avgtime2, stc_xyz(3:3:size(stc_xyz,1),:)'), title(ax4,'STC_Z', 'FontSize', fs),  
            xlim(ax4,[avgtime2(1), avgtime2(end)]), ylim(ax4,[ymin, ymax]), pause(1)
            plot(ax5, avgtime2, stc'), title(ax5, 'STC power', 'FontSize', fs),  
            xlim(ax5,[avgtime2(1), avgtime2(end)]), ylim(ax5,[ymin, ymax]), pause(1)
            headmodel_src = load(HeadModelFile);
            surf = load(file_fullpath(headmodel_src.SurfaceFile));
            cla(ax6), hold on
            %%hh = trimesh(surf.Faces, surf.Vertices(:,1),surf.Vertices(:,2),surf.Vertices(:,3));  set(hh,'FaceColor','none'); hold on
            set(trisurf(surf.Faces, surf.Vertices(:,1),surf.Vertices(:,2),surf.Vertices(:,3)),'FaceColor','white'); alpha 0.5
            % scatter3(ax6, headmodel_src.GridLoc(:,1), headmodel_src.GridLoc(:,2),headmodel_src.GridLoc(:,3), 2, 'b.')
            view(1,10), hold on
            scatter3(ax6, headmodel_src.GridLoc(n_hind,1), headmodel_src.GridLoc(n_hind,2),headmodel_src.GridLoc(n_hind,3), 100, 'ro', 'filled')
            view(Est_loc_lcmv_); hold on
            headshape =load(file_fullpath(sFiles.ChannelFile));
            headshape = headshape.HeadPoints.Loc';
            scatter3(ax6, headshape(:,1), headshape(:,2), headshape(:,3), 50, 'go'); axis off; rotate3d,
            zoom(1.5); title(ax6, 'Source location plot', 'FontSize', fs), pause(1)
            set(gcf, 'Position', get(0, 'Screensize')); pause(0.5)
            saveas(gcf, sprintf('%sgit//ChildBrain//BeamComp//BeamComp_Resultfiles//Biomag_multimodal_data//BST//%s_%s-results.png', homedir, dfname, stimcat), 'png')
        end
        % pow = result_lcmv.SourceDecompSa';
        % [val, ind] = max(pow(:));
        % [row_ind, col_ind] = ind2sub(size(pow),ind);
        
        %% Write results
        resultfile=[ homedir 'git//ChildBrain//BeamComp//BeamComp_Resultfiles//Biomag_multimodal_data//'...
                    'BST//BST_Result-Biomag_multimodal_data_source_loc.csv'];
        if dipnum==1            
            fid = fopen(strcat(resultfile), 'a+');
            fprintf(fid, '\nGrid res = %s,\n', num2str(par.gridres));
            fprintf(fid, 'Band pass= %s,\n', num2str(par.bpfreq));
            fprintf(fid, 'reg_form = %s,\n', par.reg_form);
            fprintf(fid, 'Date&time = %s,\n', datestr(now));
            fclose(fid);  
        end
        fid = fopen(strcat(resultfile), 'a+');
        fprintf(fid, '%s,', dfname);
        fprintf(fid, '%s,', stimcat);    
        fprintf(fid, '%.2f,', [Est_loc_lcmv_neuromag_, Est_val_lcmv_, difff_lcmv_]);
        fprintf(fid, '%.2f,', [Est_loc_lcmv_neuromag, Est_val_lcmv, difff_lcmv]);

        fprintf(fid, '%.2f,', sqrt(sum(([0,0,0]-stimcat_act_loc_ctf ).^2)));
        fprintf(fid, '%.2f,', sqrt(sum(([0,0,0]-Est_loc_lcmv_).^2)));
        fprintf(fid, '%d,', length(sFilesEpochs));
        % fprintf(fid, '%d,', size(evokedpst.avg,1));
        % fprintf(fid, '%.2f,', SNR);
        % fprintf(fid, '%f,', par.reg);
        % fprintf(fid, '%s,', ''); %rank
        % fprintf(fid, '%s,', '');
        % fprintf(fid, '%s,', 'LCMV');
        % fprintf(fid, '%.2f,', totalVolume);
        % fprintf(fid, '%.2f,', totalArea);
        fprintf(fid, '%d,', n_act_grid);
        fprintf(fid, '%.2f,', PSVol);
        % fprintf(fid, '%.2f,', sqrt(sum((cntrd_locs1*1000-hspot).^2)));
        % fprintf(fid, '%.2f,', cntrd_locs1*1000);%, );
        fprintf(fid, '\n');
        fclose(fid);

        clearex AnatDir CortexFile HeadFile MriFile ProtocolName RawFile SubjectName ...
                actual_diploc bst_db dense_dig_file dfname evdict homedir keyset maxf ...
                par sFiles sSubject tutorial_dir valueset stimcat
        toc
        close all
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% END %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%